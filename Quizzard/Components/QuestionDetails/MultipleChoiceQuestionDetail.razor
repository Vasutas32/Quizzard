@using Quizzard.Models
@using Quizzard.Models.Questions

@foreach (var option in question.AnswerOptions)
{
	<label style="margin-bottom: 10px;">
		<input type="checkbox"
			   checked="@IsChecked(question.Id, option)"
			   @onchange="(ChangeEventArgs e) => OnMultipleChoiceChange(question.Id, option, e)" />
		@option.OptionText
	</label>
	<br />
}

@code {

	[Parameter]
	public MultipleChoiceQuestion question { get; set; }

	[Parameter]
	public UserAnswer userAnswer { get; set; }

	[Parameter]
	public List<UserAnswer> userAnswers { get; set; }


	private Dictionary<int, List<string>> multipleChoiceSelections = new Dictionary<int, List<string>>();

	private bool IsChecked(int questionId, AnswerOption option)
	{
		return multipleChoiceSelections.TryGetValue(questionId, out var selections) && selections.Contains(option.ClientId.ToString());
	}

	private void OnMultipleChoiceChange(int questionId, AnswerOption option, ChangeEventArgs e)
	{
		var isChecked = e.Value?.ToString()?.ToLower() == "true";

		var ua = userAnswers.FirstOrDefault(a => a.QuestionId == questionId);
		if (ua != null)
		{
			if (!multipleChoiceSelections.ContainsKey(questionId))
			{
				multipleChoiceSelections[questionId] = new List<string>();
			}
			var selections = multipleChoiceSelections[questionId];
			if (isChecked)
			{
				if (!selections.Contains(option.ClientId.ToString()))
					selections.Add(option.ClientId.ToString());
			}
			else
			{
				selections.Remove(option.ClientId.ToString());
			}
			ua.SelectedAnswer = string.Join(";", selections.OrderBy(x => x));
		}
	}
}
