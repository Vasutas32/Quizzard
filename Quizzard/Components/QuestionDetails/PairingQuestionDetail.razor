@using Quizzard.Models
@using Quizzard.Models.Questions

<div style="display:flex; gap:2rem;">
	<!-- Column A -->
	<div>
		<h5>Column A</h5>
		@for (int i = 0; i < pq.ColumnA.Count; i++)
		{
			var index = i;
			var bg = pairs[question.Id].ContainsKey(pq.AnswerOptions[index].OrderIndex)
			? ColorForPair(question.Id, pq.AnswerOptions[index].OrderIndex)
			: "white";
			<button class="btn" style="margin:0.2rem; background:@bg;"
					@onclick="() => OnClickA(question.Id, pq.AnswerOptions[index].OrderIndex)">
				@pq.ColumnA[index]
			</button>
		}
	</div>
	<!-- Column B -->
	<div>
		<h5>Column B</h5>
		@for (int j = 0; j < pq.ColumnB.Count; j++)
		{
			var index = j;
			var pairedA = pairs[question.Id]
			.FirstOrDefault(kv => kv.Value == pq.AnswerOptions[index + pq.ColumnA.Count].OrderIndex).Key;
			string bg = "white";
			if (TryGetPairedA(question.Id, pq.AnswerOptions[index + pq.ColumnA.Count].OrderIndex, out var aClientId))
			{
				bg = ColorForPair(question.Id, aClientId);
			}
			<button class="btn" style="margin:0.2rem; background:@bg;"
					@onclick="() => OnClickB(question.Id, pq.AnswerOptions[index + pq.ColumnA.Count].OrderIndex)">
				@pq.ColumnB[index]
			</button>
		}
	</div>
</div>

@code {

	[Parameter]
	public PairingQuestion pq { get; set; }
	[Parameter]
	public Question question { get; set; }

	[Parameter]
	public List<UserAnswer> userAnswers { get; set; }


	[Parameter]
	public Dictionary<int, Dictionary<int, int>> pairs { get; set; }
	[Parameter]
	public Dictionary<int, int?> selectedA { get; set; }
	[Parameter]
	public Dictionary<int, int?> selectedB { get; set; }

	private static readonly string[] PairColors = new[]
		{
	"#FF0000", "#BAE1FF", "#B4DA55", "#FFFFBA", "#E2BAFF", "#FFDAC1"
  };

	[Parameter]
	public Dictionary<int, Dictionary<int, string>> _pairColors { get; set; }

	private Dictionary<int, int> _nextPairColorIndex = new();


	void OnClickA(int qid, int aIndex)
	{
		// toggle‐off if clicked twice
		if (selectedA[qid] == aIndex)
		{
			selectedA[qid] = null;
			return;
		}
		selectedA[qid] = aIndex;

		// if B had already a selection, commit the pair
		if (selectedB[qid].HasValue)
		{
			var bIndex = selectedB[qid].Value;

			// remove any existing pairing that pointed to this bi:
			if (TryGetPairedA(qid, bIndex, out var oldAIndex))
			{
				pairs[qid].Remove(oldAIndex);
				_pairColors[qid].Remove(oldAIndex);
			}

			// add the new pairing and assign it a fresh color
			pairs[qid][aIndex] = bIndex;
			EnsureHasColor(qid, aIndex);

			// clear temporary selections
			selectedA[qid] = selectedB[qid] = null;
			UpdateUserAnswer(qid);
		}
	}

	void OnClickB(int qid, int bIndex)
	{
		// toggle‐off if clicked twice
		if (selectedB[qid] == bIndex)
		{
			selectedB[qid] = null;
			return;
		}
		selectedB[qid] = bIndex;

		// if A had already a selection, commit the pair
		if (selectedA[qid].HasValue)
		{
			var aIndex = selectedA[qid].Value;

			// remove any existing pairing that pointed to this bi:
			if (TryGetPairedA(qid, bIndex, out var oldAIndex))
			{
				pairs[qid].Remove(oldAIndex);
				_pairColors[qid].Remove(oldAIndex);
			}

			// add the new pairing and assign it a fresh color
			pairs[qid][aIndex] = bIndex;
			EnsureHasColor(qid, aIndex);

			// clear temporary selections
			selectedA[qid] = selectedB[qid] = null;
			UpdateUserAnswer(qid);
		}
	}



	private void EnsureHasColor(int qid, int aIndex)
	{
		if (!_pairColors.TryGetValue(qid, out var map))
			_pairColors[qid] = map = new Dictionary<int, string>();

		if (!_nextPairColorIndex.TryGetValue(qid, out var next))
			_nextPairColorIndex[qid] = next = 0;

		if (!map.ContainsKey(aIndex))
		{
			// grab the slot, *then* increment
			var slot = next;
			_nextPairColorIndex[qid] = next + 1;

			// pick the color
			var color = slot < PairColors.Length
						? PairColors[slot]
						: $"hsl({slot * 60 % 360},70%,80%)";

			map[aIndex] = color;
		}
	}


	private bool TryGetPairedA(int qid, int bIndex, out int aIndex)
	{
		foreach (var kv in pairs[qid])
		{
			if (kv.Value == bIndex)
			{
				aIndex = kv.Key;
				return true;
			}
		}
		aIndex = -1;
		return false;
	}

	string ColorForPair(int qid, int aIndex)
	{
		if (_pairColors.TryGetValue(qid, out var map) &&
			map.TryGetValue(aIndex, out var color))
			return color;
		return "transparent";
	}

	void UpdateUserAnswer(int qid)
	{
		// flatten dictionary ai→bi into "ai bi; ai bi; ..." form, sorted by ai
		var dict = pairs[qid];
		var entries = dict.OrderBy(kv => kv.Key)
								.Select(kv => $"{kv.Key}:{kv.Value}");

		userAnswers.First(a => a.QuestionId == qid)
							.SelectedAnswer = string.Join(";", entries);
	}
}
