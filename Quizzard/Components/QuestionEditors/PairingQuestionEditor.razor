@using Quizzard.Models
@using Quizzard.Models.Questions


@{
    var aCount = pq.ColumnA.Count;
    var bCount = pq.ColumnB.Count;
    var pairs = pq.CorrectPairs;
}
@for (int row = 0; row < pq.ColumnA.Count; row++)
{
    var index = row;
    <div style="display:flex; gap:8px; margin-bottom:4px;">
        <input class="rounded-pill" @bind="pq.ColumnA[index]" placeholder=@($"A{index+1}") />
        <input class="rounded-pill" @bind="pq.ColumnB[index]" placeholder=@($"B{index+1}") />
    </div>
}
<div style="margin-top: 20px;">
    <button class="btn btn-success" @onclick="() => AddPairRow()">+ Row</button>
    <button class="btn btn-danger" @onclick="() => RemovePairRow()" disabled="@(pq.ColumnA.Count <= 2)">– Row</button>
</div>
<label class="mt-3">Set the correct match for each “A”:</label>
@for (int i = 0; i < aCount; i++)
{
    var aIndex = i;
    var a = pq.AnswerOptions[aIndex].ClientId.ToString();
    var selectedB = pairs.TryGetValue(a, out var b) ? b : "";
    <div class="d-flex align-items-center mb-2">
        <strong class="me-2">@pq.ColumnA[aIndex] ↔</strong>
        <select class="form-select w-auto"
        value="@selectedB"
        @onchange="@(e => OnPairSelectionChanged(a, e.Value?.ToString() ?? "") )">
            <option value="">(choose…)</option>
            @for (int j = 0; j < bCount; j++)
            {
                var bIndex = j;
                <option value="@pq.AnswerOptions[aCount + bIndex].ClientId.ToString()">@pq.ColumnB[bIndex]</option>
            }
        </select>    
    </div>
}

@code {

    [Parameter]
	public PairingQuestion pq { get; set; }

    void AddPairRow()
    {
        //Add one more option for column A and B
        pq.ColumnA.Add("");
        pq.ColumnB.Add("");
        pq.SyncAnswerOptionsFromColumns();
    }

    void RemovePairRow()
    {
        //Remove the last two pairs
        if (pq.ColumnA.Count > 2)
        {

            // The list index for the A option being removed is the current ColumnA count - 1
            var aIndexToRemove = pq.ColumnA.Count - 1;
            var aClientIdToRemove = pq.AnswerOptions[aIndexToRemove].ClientId.ToString();

            // The list index for the B option being removed is (A Count) + (B Count - 1)
            var bIndexToRemoveInAnswerOptions = pq.ColumnA.Count + pq.ColumnB.Count - 1;
            var bClientIdToRemove = pq.AnswerOptions[bIndexToRemoveInAnswerOptions].ClientId.ToString();

            //Remove the actual text entries
            pq.ColumnA.RemoveAt(aIndexToRemove);
            pq.ColumnB.RemoveAt(pq.ColumnB.Count - 1);

            //Clean up the CorrectPairs dictionary using the ClientIds
            //Remove the pairing where the removed A option was the Key (Column A item)
            pq.CorrectPairs.Remove(aClientIdToRemove);

            // Remove any pairing where the removed B option was the Value (Column B item)
            var aKeyPairedWithRemovedB = pq.CorrectPairs
                .FirstOrDefault(kv => kv.Value == bClientIdToRemove).Key;

            if (!string.IsNullOrEmpty(aKeyPairedWithRemovedB))
            {
                pq.CorrectPairs.Remove(aKeyPairedWithRemovedB);
            }

            //Synchronize AnswerOptions. This rebuilds the list, keeping the remaining IDs stable.
            pq.SyncAnswerOptionsFromColumns();
        }
    }

    void OnPairSelectionChanged(string aClientId, string bClientId)
    {
        // assign or re‑assign the correct B for this A
        pq.CorrectPairs[aClientId] = bClientId;
    }
}
