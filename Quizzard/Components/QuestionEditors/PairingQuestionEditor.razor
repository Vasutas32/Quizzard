@using Quizzard.Models
@using Quizzard.Models.Questions


@{
    var aCount = pq.ColumnA.Count;
    var bCount = pq.ColumnB.Count;
    var pairs = pq.CorrectPairs;
}
@for (int row = 0; row < pq.ColumnA.Count; row++)
{
    var index = row;
    <div style="display:flex; gap:8px; margin-bottom:4px;">
        <input class="rounded-pill" @bind="pq.ColumnA[index]" placeholder=@($"A{index+1}") />
        <input class="rounded-pill" @bind="pq.ColumnB[index]" placeholder=@($"B{index+1}") />
    </div>
}
<div style="margin-top: 20px;">
    <button class="btn btn-success" @onclick="() => AddPairRow()">+ Row</button>
    <button class="btn btn-danger" @onclick="() => RemovePairRow()" disabled="@(pq.ColumnA.Count <= 2)">– Row</button>
</div>
<label class="mt-3">Set the correct match for each “A”:</label>
@for (int a = 0; a < aCount; a++)
{
    var index = a;
    var selectedB = pairs.TryGetValue(index, out var b) ? b : -1;
    <div class="d-flex align-items-center mb-2">
        <strong class="me-2">@pq.ColumnA[index] ↔</strong>
        <select class="form-select w-auto"
        value="@selectedB"
        @onchange="@(e => OnPairSelectionChanged(index, int.Parse(e.Value?.ToString() ?? "-1")) )">
            <option value="-1">(choose…)</option>
            @for (int j = 0; j < bCount; j++)
            {
                var indexB = j;
                <option value="@indexB">@pq.ColumnB[indexB]</option>
            }
        </select>
    </div>
}
@* @for (int a = 0; a < aCount; a++)
{
    var listIndexA = a;

    // Look up the paired B's OrderIndex (e.g., 3, 4, 5)
    var pairedBOrderIndex = pairs.TryGetValue(listIndexA, out var bOrderIndex) ? bOrderIndex : -1;

    <div class="d-flex align-items-center mb-2">
        <strong class="me-2">@pq.ColumnA[listIndexA] ↔</strong>
        <select class="form-select w-auto"
                value="@pairedBOrderIndex"
                @onchange="@(e => OnPairSelectionChanged(listIndexA, int.Parse(e.Value?.ToString() ?? "-1")) )">
            <option value="-1">(choose…)</option>
            @for (int j = 0; j < bCount; j++)
            {
                var listIndexB = j;
                // Get the B OrderIndex (e.g., 3, 4, 5) to be the option's value
                var bOptionOrderIndex = listIndexB + aCount;

                <option value="@bOptionOrderIndex">@pq.ColumnB[listIndexB]</option>
            }
        </select>
    </div>
} *@

@code {

    [Parameter]
    public PairingQuestion pq { get; set; }

    void AddPairRow()
    {
        //Add one more option for column A and B
        pq.ColumnA.Add("");
        pq.ColumnB.Add("");
        pq.SyncAnswerOptionsFromColumns();
    }

    void RemovePairRow()
    {
        //Remove the last two pairs
        if (pq.ColumnA.Count > 2)
        {

            // The list index for the A option being removed is the current ColumnA count - 1
            var aIndexToRemove = pq.ColumnA.Count - 1;

            // The list index for the B option being removed is (A Count) + (B Count - 1)
            var bIndexToRemoveInAnswerOptions = pq.ColumnA.Count + pq.ColumnB.Count - 1;

            //Remove the actual text entries
            pq.ColumnA.RemoveAt(aIndexToRemove);
            pq.ColumnB.RemoveAt(pq.ColumnB.Count - 1);

            //Clean up the CorrectPairs dictionary using the ClientIds
            //Remove the pairing where the removed A option was the Key (Column A item)
            pq.CorrectPairs.Remove(aIndexToRemove);

            // Remove any pairing where the removed B option was the Value (Column B item)
            var aKeyPairedWithRemovedB = pq.CorrectPairs
                .FirstOrDefault(kv => kv.Value == bIndexToRemoveInAnswerOptions);

            if (!aKeyPairedWithRemovedB.Equals(default(KeyValuePair<int, int>)))
            {
                pq.CorrectPairs.Remove(aKeyPairedWithRemovedB.Key);
            }

            //Synchronize AnswerOptions. This rebuilds the list, keeping the remaining IDs stable.
            pq.SyncAnswerOptionsFromColumns();
        }
    }

    void OnPairSelectionChanged(int aListIndex, int bOrderIndex)
    {

        if (bOrderIndex != -1)
        {
            // Assign or re-assign the pair
            pq.CorrectPairs[aListIndex] = bOrderIndex;
        }
        else
        {
            // If "-1" (choose...) is selected, remove the pairing for this A item
            pq.CorrectPairs.Remove(aListIndex);
        }
    }
}
