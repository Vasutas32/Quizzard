@using Quizzard.Models
@using Quizzard.Models.Questions


@{
var aCount = pq.ColumnA.Count;
var bCount = pq.ColumnB.Count;
var pairs = pq.CorrectPairs;
}
@for (int row = 0; row < pq.ColumnA.Count; row++)
{
    var index = row;
    <div style="display:flex; gap:8px; margin-bottom:4px;">
        <input class="rounded-pill" @bind="pq.ColumnA[index]" placeholder=@($"A{index+1}") />
        <input class="rounded-pill" @bind="pq.ColumnB[index]" placeholder=@($"B{index+1}") />
    </div>
}
<div style="margin-top: 20px;">
    <button class="btn btn-success" @onclick="() => AddPairRow()">+ Row</button>
    <button class="btn btn-danger" @onclick="() => RemovePairRow()" disabled="@(pq.ColumnA.Count <= 2)">– Row</button>
</div>
<label class="mt-3">Set the correct match for each “A”:</label>

@for (int a = 0; a < aCount; a++)
{
    var index = a;
    var selectedB = pairs.TryGetValue(index, out var b) ? b : -1;
    <div class="d-flex align-items-center mb-2">
        <strong class="me-2">@pq.ColumnA[index] ↔</strong>
        <select class="form-select w-auto"
        value="@selectedB"
        @onchange="@(e => OnPairSelectionChanged(index, int.Parse(e.Value?.ToString() ?? "-1")) )">
            <option value="-1">(choose…)</option>
            @for (int beck = 0; beck < bCount; beck++)
            {
                var indexB = beck;
                <option value="@indexB">@pq.ColumnB[indexB]</option>
            }
        </select>
    </div>
}

@code {

    [Parameter]
	public PairingQuestion pq { get; set; }

    void AddPairRow()
    {
        // add one more A and one more B
        pq.ColumnA.Add("");
        pq.ColumnB.Add("");
        pq.SyncAnswerOptionsFromColumns();
    }

    void RemovePairRow()
    {
        // remove the last two
        if (pq.ColumnA.Count > 2)
        {
            pq.ColumnA.RemoveAt(pq.ColumnA.Count - 1);
            pq.ColumnB.RemoveAt(pq.ColumnB.Count - 1);
        }
        pq.SyncAnswerOptionsFromColumns();
    }

    void OnPairSelectionChanged(int aIndex, int bIndex)
    {
        // assign or re‑assign the correct B for this A
        pq.CorrectPairs[aIndex] = bIndex;
    }
}
