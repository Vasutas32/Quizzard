@page "/login"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Quizzard.Data
@using Quizzard.Models
@using Quizzard.ViewModels
@using System.Security.Claims
@inject QuizDbContext DbContext
@inject NavigationManager navigationManager
@inject Quizzard.Services.QuizService QuizService



<div class="row">
	<div class="col-lg-4">

		<h3>Login</h3>
		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<div class="alert alert-danger">@errorMessage</div>
		}
		<EditForm Model="@Model" OnValidSubmit="HandleLoginOrRegister" FormName="LoginForm">
			<DataAnnotationsValidator />
			<div class="mb-3">

				<label>Username</label>
				<InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
				<ValidationMessage For="() => Model.Username" />
				<div class="mb-3">

					<label>Password</label>
					<InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
					<ValidationMessage For="()=> Model.Password" />
				</div>
				<div class="mb-3">
					<button type="submit" @onclick="SetActionToLogin" class="btn btn-primary">Login</button>
					<button type="submit" @onclick="SetActionToRegister" class="btn btn-secondary">Register</button>
				</div>
			</div>
		</EditForm>
	</div>
</div>


@code {
	// [CascadingParameter]
	// public HttpContext? HttpContext { get; set; }


	[SupplyParameterFromForm]
	public LoginViewModel Model { get; set; } = new LoginViewModel();

	private string Action { get; set; } = "Login";
	private string? errorMessage;

	private void SetActionToLogin() => Action = "Login";
	private void SetActionToRegister() => Action = "RegisterUser";

	private void HandleLoginOrRegister()
	{
		var endpoint = (Action == "Login") ? "/LoginProcessor" : "/RegisterUser";

		// Construct the URL with encoded data
		var encodedUsername = Uri.EscapeDataString(Model.Username);
		var encodedPassword = Uri.EscapeDataString(Model.Password);
		var redirectUrl = $"{endpoint}?username={encodedUsername}&password={encodedPassword}";

		// Force the browser to leave Blazor and hit the ASP.NET Core pipeline
		navigationManager.NavigateTo(redirectUrl, forceLoad: true);
	}

	private bool IsModelValid()
	{
		if (string.IsNullOrWhiteSpace(Model.Username) || string.IsNullOrWhiteSpace(Model.Password))
		{
			errorMessage = "Username and Password are required.";
			return false;
		}
		errorMessage = null;
		return true;
	}

}
