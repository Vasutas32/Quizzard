@page "/create-quiz"
@rendermode InteractiveServer
@inject Quizzard.Services.QuizService QuizService
@inject IWebHostEnvironment Env
@using Quizzard.Components.QuestionEditors
@using Quizzard.Models
@using Quizzard.Models.Questions
@using Microsoft.AspNetCore.Components

<h3>Create a New Quiz</h3>

<!-- Quiz Title Input -->
<input class="quiz-name-input" style="margin-bottom: 20px;" @bind="quizTitle" placeholder="Enter quiz title" />

<!-- Add Question Section -->   
<h4>Add Questions</h4>

<!-- Question Type Selector -->
<div style="margin-bottom: 20px;">
    <label>Select Question Type:</label>
    <select @bind="selectedQuestionType" style="font-family:'Comic Sans MS';">
        @foreach (QuestionType type in Enum.GetValues(typeof(QuestionType)))
        {
            <option value="@type" style="font-family:'Comic Sans MS'">@type</option>
        }
    </select>
    <br />
    <div style="margin-top: 20px;">
        <button class="btn btn-primary btn-outline-primary" @onclick="AddQuestion">Add Question</button> <!--TESTING BUTTON FOR STYLE-->
        <button class="btn btn-warning" style="color:white" @onclick="() => PasteQuestion()">Paste Question</button>
    </div>
    @* <button @onclick="Bello">Do the Bello!</button> *@
</div>
@foreach (var question in questions)
{
    <div>
        <input class="rounded-pill" style="margin-bottom: 20px;" @bind="question.Text" placeholder="Question text" />
        <br />

        <!-- Depending on what the question type is render the question differently-->
        @switch (question){

            case SingleChoiceQuestion scq:
                <SingleChoiceQuestionEditor scq="@scq"></SingleChoiceQuestionEditor>
                break;

            case MultipleChoiceQuestion mcq:
                <MultipleChoiceQuestionEditor mcq="@mcq"></MultipleChoiceQuestionEditor>
                break;

            case TrueFalseQuestion tfq:
                <TrueFalseQuestionEditor tfq="@tfq"></TrueFalseQuestionEditor>
                break;

            case TextInputQuestion tiq:
               <TextInputQuestionEditor tiq="@tiq"></TextInputQuestionEditor>
                break;

            case PairingQuestion pq:
                var aCount = pq.ColumnA.Count;
                var bCount = pq.ColumnB.Count;
                var pairs = pq.CorrectPairs;
                @for (int row = 0; row < pq.ColumnA.Count; row++)
                {
                    var index = row;
                    <div style="display:flex; gap:8px; margin-bottom:4px;">
                        <input class="rounded-pill" @bind="pq.ColumnA[index]" placeholder=@($"A{index+1}") />
                        <input class="rounded-pill" @bind="pq.ColumnB[index]" placeholder=@($"B{index+1}") />
                    </div>
                }
                <div style="margin-top: 20px;">
                    <button class="btn btn-success" @onclick="() => AddPairRow(pq)">+ Row</button>
                    <button class="btn btn-danger" @onclick="() => RemovePairRow(pq)" disabled="@(pq.ColumnA.Count <= 2)">– Row</button>
                </div>
                <label class="mt-3">Set the correct match for each “A”:</label>

                @for (int a = 0; a < aCount; a++)
                {
                    var index = a;
                    var selectedB = pairs.TryGetValue(index, out var b) ? b : -1;
                    <div class="d-flex align-items-center mb-2">
                        <strong class="me-2">@pq.ColumnA[index] ↔</strong>
                        <select class="form-select w-auto"
                        value="@selectedB"
                        @onchange="@(e => OnPairSelectionChanged(pq, index, int.Parse(e.Value?.ToString() ?? "-1")) )">
                            <option value="-1">(choose…)</option>
                            @for (int beck = 0; beck < bCount; beck++)
                            {
                                var indexB = beck;
                                <option value="@indexB">@pq.ColumnB[indexB]</option>
                            }
                        </select>
                    </div>
                }
                break;
            default:
                break;
        }
        @if (question.Type != QuestionType.Pairing)
        {
            <br />
        }
        <br />
        <InputFile OnChange="e => OnImageSelected(question, e)" />
        @if (!string.IsNullOrEmpty(question.ImagePath))
        {
            <img src="@question.ImagePath" alt="Preview" style="max-width:200px;display:block;margin-top:.5em" />
        }
        <br />
        <div style="margin-top: 20px;">
            <button class="btn btn-warning" @onclick="() => CopyQuestion(question)">Copy Question</button>
            <button class="btn btn-danger" @onclick="() => RemoveQuestion(question)">Remove Question</button>
        </div>
        <hr />
    </div>
}

<button class="btn btn-success" @onclick="SaveQuiz">Save Quiz</button>
<button class="btn btn-danger" @onclick="Cancel">Cancel</button>

@code {
    private string quizTitle = "";
    private List<Question> questions = new();
    private QuestionType selectedQuestionType = QuestionType.SingleChoice;
    private Question questionToCopy = null;

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    // [Inject] private IWebHostEnvironment Env { get; set; }

    //Purely for deubgging purposes
    private void Bello()
    {
        Console.WriteLine("I'm doing the bello!!");
    }

    private void AddQuestion()
    {
        switch (selectedQuestionType)
        {
            case QuestionType.SingleChoice:
                var newSingleChoiceQuestion = new SingleChoiceQuestion
                    {
                        AnswerOptions = new List<AnswerOption>
                {
                    new AnswerOption { OptionText = "" },
                    new AnswerOption { OptionText = "" }
                },
                        CorrectAnswer = "0"
                    };
                questions.Add(newSingleChoiceQuestion);
                break;

            case QuestionType.MultipleChoice:
                var newMultipleChoiceQuestion = new MultipleChoiceQuestion
                    {
                        AnswerOptions = new List<AnswerOption>
                {
                    new AnswerOption { OptionText = "" },
                    new AnswerOption { OptionText = "" }
                },
                        CorrectAnswer = ""
                    };
                questions.Add(newMultipleChoiceQuestion);
                break;
            case QuestionType.TrueFalse:
                var newTrueFalseQuestion = new TrueFalseQuestion
                    {
                        AnswerOptions = new List<AnswerOption>
                {
                    new AnswerOption { OptionText = "True" },
                    new AnswerOption { OptionText = "False" }
                },
                        CorrectAnswer = "1"
                    };
                questions.Add(newTrueFalseQuestion);
                break;

            case QuestionType.TextInput:
                var newTextInputQuestion = new TextInputQuestion
                    {
                        CorrectAnswer = "",
                    };
                questions.Add(newTextInputQuestion);
                break;

            case QuestionType.Pairing:
                var newPairingQuestion = new PairingQuestion{CorrectAnswer = ""};
                newPairingQuestion.ColumnA = new List<string> { "", "" };
                newPairingQuestion.ColumnB = new List<string> { "", "" };
                newPairingQuestion.SyncAnswerOptionsFromColumns();
                questions.Add(newPairingQuestion);
                break;

            default: 
                break;
        }
    }

    void AddPairRow(PairingQuestion pq)
    {
        // add one more A and one more B
        pq.ColumnA.Add("");
        pq.ColumnB.Add("");
        pq.SyncAnswerOptionsFromColumns();
    }

    void RemovePairRow(PairingQuestion pq)
    {
        // remove the last two
        if (pq.ColumnA.Count > 2)
        {
            pq.ColumnA.RemoveAt(pq.ColumnA.Count - 1);
            pq.ColumnB.RemoveAt(pq.ColumnB.Count - 1);
        }
        pq.SyncAnswerOptionsFromColumns();
    }


    private void RemoveQuestion(Question question)
    {
        questions.Remove(question);
    }

    private void CopyQuestion(Question question)
    {
        questionToCopy = question.Copy();
    }

    private void PasteQuestion()
    {
        if(questionToCopy != null) {
            var newQuestion = questionToCopy.Copy();
            questions.Add(newQuestion);
        }
    }

    private void AddOption(Question question)
    {
        // Only allow dynamic options for SingleChoice and MultipleChoice
        if (question is SingleChoiceQuestion || question is MultipleChoiceQuestion)
            question.AnswerOptions.Add(new AnswerOption { OptionText = "" });
    }

    private void RemoveOption(Question question)
    {
        if ((question is SingleChoiceQuestion || question is MultipleChoiceQuestion) && question.AnswerOptions.Count > 2)
            question.AnswerOptions.RemoveAt(question.AnswerOptions.Count - 1);
    }

    void OnCorrectOptionChange(MultipleChoiceQuestion mcq, int idx, ChangeEventArgs e)
    {
        var isChecked = e.Value?.ToString()?.ToLower() == "true";
        if (isChecked)
        {
            if (!mcq.CorrectAnswerIndices.Contains(idx))
                mcq.CorrectAnswerIndices.Add(idx);
        }
        else
        {
            mcq.CorrectAnswerIndices.Remove(idx);
        }
    }

    void OnPairSelectionChanged(PairingQuestion pq, int aIndex, int bIndex)
    {
        // assign or re‑assign the correct B for this A
        pq.CorrectPairs[aIndex] = bIndex;
    }



    private async Task SaveQuiz()
    {
        foreach (var mcq in questions.OfType<MultipleChoiceQuestion>())
        {
            // turn [0,2,3] into "0;2;3"
            mcq.CorrectAnswer = string.Join(";", mcq.CorrectAnswerIndices.OrderBy(x => x));
        }

        foreach (var pq in questions.OfType<PairingQuestion>())
        {
            pq.SyncAnswerOptionsFromColumns();
            pq.SyncCorrectAnswerFromPairs();
        }
        if (!string.IsNullOrWhiteSpace(quizTitle) && questions.Count > 0)
        {
            var newQuiz = new Quiz { Title = quizTitle, Questions = questions };
            await QuizService.AddQuizAsync(newQuiz);
            Navigation.NavigateTo("/");
        }
        else if(!(questions.Count > 0))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please add at least 1 question to your quiz!");
        }
        else if (string.IsNullOrWhiteSpace(quizTitle))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please give your quiz a title!");
        }

    }

    private void Cancel()
    {
        Navigation.NavigateTo("/quizzes");
    }

    async Task OnImageSelected(Question question, InputFileChangeEventArgs e)
    {
        var file = e.File;
        // generate a unique name
        var ext = Path.GetExtension(file.Name);
        var fileName = $"{Guid.NewGuid()}{ext}";
        var saveDir = Path.Combine(Env.WebRootPath, "uploads");
        Directory.CreateDirectory(saveDir);
        var savePath = Path.Combine(saveDir, fileName);

        // actually copy
        await using var fs = File.OpenWrite(savePath);
        await file.OpenReadStream(maxAllowedSize: 10_000_000).CopyToAsync(fs);

        // save the *relative* path back into your model
        question.ImagePath = $"uploads/{fileName}";
    }


    [Inject] private NavigationManager Navigation { get; set; }
}
