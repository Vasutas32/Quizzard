@page "/create-quiz/{QuizId:int?}"
@rendermode InteractiveServer
@inject Quizzard.Services.QuizService QuizService
@inject IWebHostEnvironment Env
@using Quizzard.Components.QuestionEditors
@using Quizzard.Models
@using Quizzard.Models.Questions
@using Microsoft.AspNetCore.Components

@if (_submitted)
{
	<div class="alert alert-success" role="alert">
		<h3>Quiz saved successfully!</h3>
		<button class="btn btn-primary" @onclick="() => Navigation.NavigateTo(navigationString)">Back</button>

	</div>
}
else
{


	<h3>Create a New Quiz</h3>


	<!-- Quiz Title Input -->
	<input class="quiz-name-input" style="margin-bottom: 20px;" @bind="quizTitle" placeholder="Enter quiz title" />

	<!-- Add Question Section -->
	<h4>Add Questions</h4>

	<!-- Question Type Selector -->
	<div style="margin-bottom: 20px;">
		<label>Select Question Type:</label>
		<select @bind="selectedQuestionType" style="font-family:'Comic Sans MS';">
			@foreach (QuestionType type in Enum.GetValues(typeof(QuestionType)))
			{
				<option value="@type" style="font-family:'Comic Sans MS'">@type</option>
			}
		</select>
		<br />
		<div style="margin-top: 20px;">
			<button class="btn btn-primary btn-outline-primary" @onclick="AddQuestion">Add Question</button> <!--TESTING BUTTON FOR STYLE-->
			<button class="btn btn-warning" style="color:white" @onclick="() => PasteQuestion()">Paste Question</button>
		</div>
		@* <button @onclick="Bello">Do the Bello!</button> *@
	</div>
	@foreach (var question in questions)
	{
		<div>
			<input class="rounded-pill" style="margin-bottom: 20px;" @bind="question.Text" placeholder="Question text" />
			<br />

			<!-- Depending on what the question type is render the question differently-->
			@switch (question)
			{

				case SingleChoiceQuestion scq:
					<SingleChoiceQuestionEditor scq="@scq" />
					break;

				case MultipleChoiceQuestion mcq:
					<MultipleChoiceQuestionEditor mcq="@mcq" />
					break;

				case TrueFalseQuestion tfq:
					<TrueFalseQuestionEditor tfq="@tfq" />
					break;

				case TextInputQuestion tiq:
					<TextInputQuestionEditor tiq="@tiq" />
					break;

				case PairingQuestion pq:
					<PairingQuestionEditor pq="pq" />
					break;
				default:
					break;
			}
			@if (question.Type != QuestionType.Pairing)
			{
				<br />
			}
			<br />
			<InputFile OnChange="e => OnImageSelected(question, e)" />
			@if (!string.IsNullOrEmpty(question.ImagePath))
			{
				<img src="@question.ImagePath" alt="Preview" style="max-width:200px;display:block;margin-top:.5em" />
			}
			<br />
			<div style="margin-top: 20px;">
				<button class="btn btn-warning" @onclick="() => CopyQuestion(question)">Copy Question</button>
				<button class="btn btn-danger" @onclick="() => RemoveQuestion(question)">Remove Question</button>
			</div>
			<hr />
		</div>
	}

	<button class="btn btn-success" @onclick="SaveQuiz">Save Quiz</button>
	<button class="btn btn-danger" @onclick="Cancel">Cancel</button>
	<button class="btn btn-close" @onclick="Bello">Bello</button>
}

@code {
	private string quizTitle = "";
	private List<Question> questions = new();
	private QuestionType selectedQuestionType = QuestionType.SingleChoice;
	private Question questionToCopy = null;

	private bool _submitted = false;
	private const string navigationString = @"\quizzes";

	[Parameter]
	public int? QuizId { get; set; }

	//Store the quiz object if editing
	private Quiz? originalQuiz = null;


	[Inject]
	public IJSRuntime JSRuntime { get; set; }

	[Inject] private NavigationManager Navigation { get; set; }

	// [Inject] private IWebHostEnvironment Env { get; set; }

	//Purely for deubgging purposes
	private void Bello()
	{
		Console.WriteLine("I'm doing the bello!!");
	}

	protected override async Task OnInitializedAsync()
	{
		if (QuizId.HasValue)
		{
			originalQuiz = await QuizService.GetQuizByIdAsync(QuizId.Value);
			if (originalQuiz != null)
			{
				quizTitle = originalQuiz.Title;
				questions = originalQuiz.Questions.OrderBy(q => q.Id).ToList();
			}
		}
	}

	private void AddQuestion()
	{
		switch (selectedQuestionType)
		{
			case QuestionType.SingleChoice:

				var options = new List<AnswerOption>
				{
					new AnswerOption { OptionText = "" },
					new AnswerOption { OptionText = "" }
				};
				var newSingleChoiceQuestion = new SingleChoiceQuestion
					{
						AnswerOptions = options,
						CorrectAnswer = options.First().ClientId.ToString()
					};
				questions.Add(newSingleChoiceQuestion);
				break;

			case QuestionType.MultipleChoice:
				var newMultipleChoiceQuestion = new MultipleChoiceQuestion
					{
						AnswerOptions = new List<AnswerOption>
				{
					new AnswerOption { OptionText = "" },
					new AnswerOption { OptionText = "" }
				},
						CorrectAnswer = ""
					};
				questions.Add(newMultipleChoiceQuestion);
				break;
			case QuestionType.TrueFalse:
				var newTrueFalseQuestion = new TrueFalseQuestion
					{
						AnswerOptions = new List<AnswerOption>
				{
					new AnswerOption { OptionText = "True" },
					new AnswerOption { OptionText = "False" }
				},
						CorrectAnswer = "1"
					};
				questions.Add(newTrueFalseQuestion);
				break;

			case QuestionType.TextInput:
				var newTextInputQuestion = new TextInputQuestion
					{
						CorrectAnswer = "",
					};
				questions.Add(newTextInputQuestion);
				break;

			case QuestionType.Pairing:
				var newPairingQuestion = new PairingQuestion { CorrectAnswer = "" };
				newPairingQuestion.ColumnA = new List<string> { "", "" };
				newPairingQuestion.ColumnB = new List<string> { "", "" };
				newPairingQuestion.SyncAnswerOptionsFromColumns();
				questions.Add(newPairingQuestion);
				break;

			default:
				break;
		}
	}


	private void RemoveQuestion(Question question)
	{
		questions.Remove(question);
	}

	private void CopyQuestion(Question question)
	{
		questionToCopy = question.Copy();
	}

	private void PasteQuestion()
	{
		if (questionToCopy != null)
		{
			var newQuestion = questionToCopy.Copy();
			questions.Add(newQuestion);
		}
	}

	private async Task SaveQuiz()
	{
		foreach (var mcq in questions.OfType<MultipleChoiceQuestion>())
		{
			// turn [0,2,3] into "0;2;3"
			mcq.CorrectAnswer = string.Join(";", mcq.CorrectAnswerOptions.OrderBy(x => x));
		}

		foreach (var pq in questions.OfType<PairingQuestion>())
		{
			pq.SyncAnswerOptionsFromColumns();
			pq.SyncCorrectAnswerFromPairs();
		}

		if (!string.IsNullOrWhiteSpace(quizTitle) && questions.Count > 0)
		{
			if (originalQuiz != null)
			{
				originalQuiz.Title = quizTitle;
				originalQuiz.Questions = questions;

				await QuizService.UpdateQuizAsync(originalQuiz);
			}
			else
			{
				var newQuiz = new Quiz { Title = quizTitle, Questions = questions };
				await QuizService.AddQuizAsync(newQuiz);

			}
			_submitted = true;
		}
		else if (!(questions.Count > 0))
		{
			await JSRuntime.InvokeVoidAsync("alert", "Please add at least 1 question to your quiz!");
		}
		else if (string.IsNullOrWhiteSpace(quizTitle))
		{
			await JSRuntime.InvokeVoidAsync("alert", "Please give your quiz a title!");
		}


	}

	private void Cancel()
	{
		Navigation.NavigateTo("/quizzes");
	}

	async Task OnImageSelected(Question question, InputFileChangeEventArgs e)
	{
		var file = e.File;
		// generate a unique name
		var ext = Path.GetExtension(file.Name);
		var fileName = $"{Guid.NewGuid()}{ext}";
		var saveDir = Path.Combine(Env.WebRootPath, "uploads");
		Directory.CreateDirectory(saveDir);
		var savePath = Path.Combine(saveDir, fileName);

		// actually copy
		await using var fs = File.OpenWrite(savePath);
		await file.OpenReadStream(maxAllowedSize: 10_000_000).CopyToAsync(fs);

		// save the *relative* path back into your model
		question.ImagePath = $"uploads/{fileName}";
	}


}
