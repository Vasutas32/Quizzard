@page "/create-quiz"
@rendermode InteractiveServer
@inject Quizzard.Services.QuizService QuizService
@using Quizzard.Models
@using Quizzard.Models.Questions
@using Microsoft.AspNetCore.Components

<h3>Create a New Quiz</h3>

<!-- Quiz Title Input -->
<input @bind="quizTitle" placeholder="Enter quiz title" />

<!-- Add Question Section -->
<h4>Add Questions</h4>
@foreach (var question in questions)
{
    <div>
        <input @bind="question.Text" placeholder="Question text" />
        <br />

        @for (int i = 0; i < question.AnswerOptions.Count; i++)
        {
            var index = i;
            <input value="@question.AnswerOptions[index].OptionText"
                   @oninput="(e) => UpdateOption(question, index, e.Value?.ToString() ?? string.Empty)"
                   placeholder=@($"Option {index + 1}") />
        }
        <br />

        <button @onclick="() => AddOption(question)">+</button>
        <button @onclick="() => RemoveOption(question)" disabled="@(question.AnswerOptions.Count <= 2)">–</button>
        <br />

        Correct Answer:
        <select @bind="question.CorrectAnswerIndex">
            @for (int i = 0; i < question.AnswerOptions.Count; i++)
            {
                <option value="@i">Option @(i + 1)</option>
            }
        </select>

        <button @onclick="() => RemoveQuestion(question)">Remove</button>
        <hr />
    </div>
}

<button @onclick="AddQuestion">Add Question</button>
<button @onclick="SaveQuiz">Save Quiz</button>
<button @onclick="Cancel">Cancel</button>
<button @onclick="Bello">Do the Bello!</button>

@code {
    private string quizTitle = "";
    private List<Question> questions = new();

    private void Bello()
    {
        Console.WriteLine("I'm doing the bello!!");
    }

    private void AddQuestion()
    {
        var newQuestion = new SingleChoiceQuestion
            {
                AnswerOptions = new List<AnswerOption>
            {
                new AnswerOption { OptionText = "" },
                new AnswerOption { OptionText = "" }
            },
                CorrectAnswerIndex = 0
            };
        questions.Add(newQuestion);
        Console.WriteLine("^q^\n");
    }

    private void RemoveQuestion(Question question)
    {
        questions.Remove(question);
    }

    private void AddOption(Question question)
    {
        question.AnswerOptions.Add(new AnswerOption { OptionText = "" });
    }

    private void RemoveOption(Question question)
    {
        if (question.AnswerOptions.Count > 2)
            question.AnswerOptions.RemoveAt(question.AnswerOptions.Count - 1);
    }

    private async Task SaveQuiz()
    {
        if (!string.IsNullOrWhiteSpace(quizTitle) && questions.Count > 0)
        {
            var newQuiz = new Quiz { Title = quizTitle, Questions = questions };
            Console.WriteLine("First question:" + questions[0].AnswerOptions[0] + "\n");
            // foreach (var question in newQuiz.Questions)
            // {
            //     await QuizService.AddAnswerOptionsAsync(question.AnswerOptions);
            // }
            await QuizService.AddQuizAsync(newQuiz);
            Navigation.NavigateTo("/");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/quizzes");
    }

    void UpdateOption(Question question, int index, string value)
    {
        // Ensure the list has enough elements
        while (question.AnswerOptions.Count < index)
        {
            question.AnswerOptions.Add(new AnswerOption { OptionText = "" });
        }
        // Now we can safely assign the value
        question.AnswerOptions[index].OptionText = value;
    }



    [Inject] private NavigationManager Navigation { get; set; }
}