@page "/quizzes/{quizId:int}"
@rendermode InteractiveServer
@inject Quizzard.Services.QuizService QuizService
@inject Quizzard.Services.IQrCodeService QrCodeService
@inject NavigationManager Navigation
@using QRCoder
@using Quizzard.Models
@using Quizzard.Models.Questions
@using System.Drawing


@if (quiz != null)
{
	@if (_submitted)
	{
		<div class="alert alert-success">
			<h4>Your score</h4>
			<p>You got <strong>@_correct</strong> out of <strong>@_total</strong> correct.</p>
			<button class="btn btn-primary" @onclick="() => Navigation.NavigateTo(navigationString)">Back</button>
		</div>
	}
	else
	{
		<div class="qr-container">
			@if (!string.IsNullOrEmpty(QrDataUrl))
			{
				<img src="@QrDataUrl" alt="Scan to take this quiz" class="qr-code" />
			}
		</div>

		<h1 style="margin-bottom: 50px;">@quiz.Title</h1>
		@foreach (var question in quiz.Questions)
		{
			var userAnswer = userAnswers.FirstOrDefault(a => a.QuestionId == question.Id);
			<div>
				<h3 style="margin-top: 20px; margin-bottom: 20px;">@question.Text</h3>
				<div>
					@if (!string.IsNullOrEmpty(question.ImagePath))
					{
						<img src="@question.ImagePath" class="question-image" />
					}
				</div>
				@if (question is SingleChoiceQuestion)
				{
					<InputRadioGroup @bind-Value="userAnswer.SelectedAnswer" Name=@($"question-{question.Id}")>
						@for (int i = 0; i < question.AnswerOptions.Count; i++)
						{
							<label style="margin-right: 20px;">
								<InputRadio Value="@i.ToString()" /> @question.AnswerOptions[i].OptionText
							</label>
						}
					</InputRadioGroup>
				}
				else if (question is MultipleChoiceQuestion)
				{
					<!-- Multiple choice: display checkboxes -->
					@for (int i = 0; i < question.AnswerOptions.Count; i++)
					{
						var index = i;
						<label style="margin-bottom: 10px;">
							<input type="checkbox"
								   checked="@IsChecked(question.Id, index)"
								   @onchange="(ChangeEventArgs e) => OnMultipleChoiceChange(question.Id, index, e)" />
							@question.AnswerOptions[index].OptionText
						</label>
						<br />
					}
				}
				else if (question is TrueFalseQuestion)
				{
					<InputRadioGroup @bind-Value="userAnswer.SelectedAnswer" Name=@($"question-{question.Id}")>
						<label>
							<InputRadio Value="@(true ? "1" : "0")" /> True
						</label>
						<label>
							<InputRadio style="margin-left: 20px;" Value="@(false ? "1" : "0")" /> False
						</label>
					</InputRadioGroup>
				}
				else if (question is TextInputQuestion)
				{
					<input class="rounded-pill" type="text" @bind="userAnswer.SelectedAnswer" placeholder="Type your answer..." />
				}
				else if (question is PairingQuestion pq)
				{
					<div style="display:flex; gap:2rem;">
						<!-- Column A -->
						<div>
							<h5>Column A</h5>
							@for (int i = 0; i < pq.ColumnA.Count; i++)
							{
								var index = i;
								var bg = pairs[question.Id].ContainsKey(index)
								? ColorForPair(question.Id, index)
								: "white";
								<button class="btn" style="margin:0.2rem; background:@bg;"
										@onclick="() => OnClickA(question.Id, index)">
									@pq.ColumnA[index]
								</button>
							}
						</div>
						<!-- Column B -->
						<div>
							<h5>Column B</h5>
							@for (int j = 0; j < pq.ColumnB.Count; j++)
							{
								var index = j;
								var pairedA = pairs[question.Id]
								.FirstOrDefault(kv => kv.Value == index).Key;
								string bg = "white";
								if (TryGetPairedA(question.Id, index, out var ai))
								{
									bg = ColorForPair(question.Id, ai);
								}
								<button class="btn" style="margin:0.2rem; background:@bg;"
										@onclick="() => OnClickB(question.Id, index)">
									@pq.ColumnB[index]
								</button>
							}
						</div>
					</div>
				}

			</div>
		}
		<button class="btn btn-success" style="margin-top: 30px; margin-bottom: 20px;" @onclick="SubmitQuiz">Submit Quiz</button>
	}
}
else
{
	<p>Loading...</p>
}

@code {
	[Parameter] public int quizId { get; set; }
	private Quiz quiz;
	private List<UserAnswer> userAnswers = new List<UserAnswer>();
	private const string navigationString = @"\quizzes";

	private Dictionary<int, int?> selectedA = new();
	private Dictionary<int, int?> selectedB = new();
	private Dictionary<int, Dictionary<int, int>> pairs = new();

	private static readonly string[] PairColors = new[]
		{
	"#FF0000", "#BAE1FF", "#B4DA55", "#FFFFBA", "#E2BAFF", "#FFDAC1"
  };
	private Dictionary<int, Dictionary<int, string>> _pairColors
			= new Dictionary<int, Dictionary<int, string>>();
	private Dictionary<int, int> _nextPairColorIndex = new();

	private string QrDataUrl;
	private bool _submitted;
	private int _correct, _total;


	protected override async Task OnInitializedAsync()
	{
		quiz = await QuizService.GetQuizByIdAsync(quizId);

		var absoluteUri = Navigation.ToAbsoluteUri($"/quizzes/{quizId}").ToString();
		QrDataUrl = await QrCodeService.GenerateQrCodeDataUrlAsync(absoluteUri);

		// Sort answer options for each question if needed (e.g., by Id)
		foreach (var question in quiz.Questions)
		{
			question.AnswerOptions = question.AnswerOptions.OrderBy(o => o.Id).ToList();
		}

		foreach (var pq in quiz.Questions.OfType<PairingQuestion>())
		{
			var half = pq.AnswerOptions.Count / 2;
			pq.ColumnA = pq.AnswerOptions
									.Take(half)
									.Select(o => o.OptionText)
									.ToList();
			pq.ColumnB = pq.AnswerOptions
									.Skip(half)
									.Take(half)
									.Select(o => o.OptionText)
									.ToList();

			selectedA[pq.Id] = null;
			selectedB[pq.Id] = null;
			pairs[pq.Id] = new Dictionary<int, int>();
		}

		userAnswers = quiz.Questions.Select(q => new UserAnswer
			{
				QuestionId = q.Id,
				Question = q,
				SelectedAnswer = "" // Default: no answer selected
			}).ToList();

		foreach (var q in quiz.Questions.OfType<PairingQuestion>())
		{
			selectedA[q.Id] = null;
			selectedB[q.Id] = null;
			pairs[q.Id] = new Dictionary<int, int>();
		}
	}

	void OnClickA(int qid, int ai)
	{
		// toggle‐off if clicked twice
		if (selectedA[qid] == ai)
		{
			selectedA[qid] = null;
			return;
		}
		selectedA[qid] = ai;

		// if B had already a selection, commit the pair
		if (selectedB[qid].HasValue)
		{
			var bi = selectedB[qid].Value;

			// remove any existing pairing that pointed to this bi:
			if (TryGetPairedA(qid, bi, out var oldA))
			{
				pairs[qid].Remove(oldA);
				_pairColors[qid].Remove(oldA);
			}

			// add the new pairing and assign it a fresh color
			pairs[qid][ai] = bi;
			EnsureHasColor(qid, ai);

			// clear temporary selections
			selectedA[qid] = selectedB[qid] = null;
			UpdateUserAnswer(qid);
		}
	}

	void OnClickB(int qid, int bi)
	{
		// toggle‐off if clicked twice
		if (selectedB[qid] == bi)
		{
			selectedB[qid] = null;
			return;
		}
		selectedB[qid] = bi;

		// if A had already a selection, commit the pair
		if (selectedA[qid].HasValue)
		{
			var ai = selectedA[qid].Value;

			// remove any existing pairing that pointed to this bi:
			if (TryGetPairedA(qid, bi, out var oldA))
			{
				pairs[qid].Remove(oldA);
				_pairColors[qid].Remove(oldA);
			}

			// add the new pairing and assign it a fresh color
			pairs[qid][ai] = bi;
			EnsureHasColor(qid, ai);

			// clear temporary selections
			selectedA[qid] = selectedB[qid] = null;
			UpdateUserAnswer(qid);
		}
	}



	private void EnsureHasColor(int qid, int aIndex)
	{
		if (!_pairColors.TryGetValue(qid, out var map))
			_pairColors[qid] = map = new Dictionary<int, string>();

		if (!_nextPairColorIndex.TryGetValue(qid, out var next))
			_nextPairColorIndex[qid] = next = 0;

		if (!map.ContainsKey(aIndex))
		{
			// grab the slot, *then* increment
			var slot = next;
			_nextPairColorIndex[qid] = next + 1;

			// pick the color
			var color = slot < PairColors.Length
						? PairColors[slot]
						: $"hsl({slot * 60 % 360},70%,80%)";

			map[aIndex] = color;
		}
	}


	private bool TryGetPairedA(int qid, int bIndex, out int aIndex)
	{
		foreach (var kv in pairs[qid])
		{
			if (kv.Value == bIndex)
			{
				aIndex = kv.Key;
				return true;
			}
		}
		aIndex = -1;
		return false;
	}

	string ColorForPair(int qid, int aIndex)
	{
		if (_pairColors.TryGetValue(qid, out var map) &&
			map.TryGetValue(aIndex, out var col))
			return col;
		return "transparent";
	}

	void UpdateUserAnswer(int qid)
	{
		// flatten dictionary ai→bi into "ai bi; ai bi; ..." form, sorted by ai
		var dict = pairs[qid];
		var entries = dict.OrderBy(kv => kv.Key)
								.Select(kv => $"{kv.Key}{kv.Value}");
		userAnswers.First(a => a.QuestionId == qid)
							.SelectedAnswer = string.Join(";", entries);
	}

	private bool IsChecked(int questionId, int optionIndex)
	{
		return multipleChoiceSelections.TryGetValue(questionId, out var selections) && selections.Contains(optionIndex);
	}

	private void OnMultipleChoiceChange(int questionId, int optionIndex, ChangeEventArgs e)
	{
		var isChecked = e.Value?.ToString()?.ToLower() == "true";  // Adjust per browser behavior

		var ua = userAnswers.FirstOrDefault(a => a.QuestionId == questionId);
		if (ua != null)
		{
			if (!multipleChoiceSelections.ContainsKey(questionId))
			{
				multipleChoiceSelections[questionId] = new List<int>();
			}
			var selections = multipleChoiceSelections[questionId];
			if (isChecked)
			{
				if (!selections.Contains(optionIndex))
					selections.Add(optionIndex);
			}
			else
			{
				selections.Remove(optionIndex);
			}
			ua.SelectedAnswer = string.Join(";", selections.OrderBy(x => x));
		}
	}

	private Dictionary<int, List<int>> multipleChoiceSelections = new Dictionary<int, List<int>>();

	private async Task SubmitQuiz()
	{
		var quizResult = new UserQuizResult
			{
				QuizId = quizId,
				Answers = userAnswers,
				CorrectAnswers = userAnswers.Count(a => a.IsCorrect),
				WrongAnswers = userAnswers.Count(a => !a.IsCorrect)
			};

		await QuizService.SaveQuizResultAsync(quizResult);
		_total = userAnswers.Count;
		_correct = userAnswers.Count(a => a.IsCorrect);
		_submitted = true;
		// Navigation.NavigateTo("/quizzes");
	}
}
