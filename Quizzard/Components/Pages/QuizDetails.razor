@page "/quizzes/{quizId:int}"
@rendermode InteractiveServer
@inject Quizzard.Services.QuizService QuizService
@inject Quizzard.Services.IQrCodeService QrCodeService
@inject NavigationManager Navigation
@using QRCoder
@using Quizzard.Components.QuestionDetails
@using Quizzard.Models
@using Quizzard.Models.Questions
@using System.Drawing


@if (quiz != null)
{
	@if (_submitted)
	{
		<div class="alert alert-success">
			<h4>Your score</h4>
			<p>You got <strong>@_correct</strong> out of <strong>@_total</strong> correct.</p>
			<button class="btn btn-primary" @onclick="() => Navigation.NavigateTo(navigationString)">Back</button>
		</div>
	}
	else
	{
		<div class="qr-container">
			@if (!string.IsNullOrEmpty(QrDataUrl))
			{
				<img src="@QrDataUrl" alt="Scan to take this quiz" class="qr-code" />
			}
		</div>

		<h1 style="margin-bottom: 50px;">@quiz.Title</h1>
		@foreach (var question in quiz.Questions)
		{
			var userAnswer = userAnswers.FirstOrDefault(a => a.QuestionId == question.Id);
			<div>
				<h3 style="margin-top: 20px; margin-bottom: 20px;">@question.Text</h3>
				<div>
					@if (!string.IsNullOrEmpty(question.ImagePath))
					{
						<img src="@question.ImagePath" class="question-image" />
					}
				</div>
			
				@switch (question)
				{

					case SingleChoiceQuestion scq:
						<SingleChoiceQuestionDetail scq="@scq" userAnswer="@userAnswer"></SingleChoiceQuestionDetail>
						break;

					case MultipleChoiceQuestion mcq:
						<MultipleChoiceQuestionDetail question="@mcq" userAnswer="@userAnswer" userAnswers="@userAnswers"></MultipleChoiceQuestionDetail>
						break;

					case TrueFalseQuestion tfq:
						<TrueFalseQuestionDetail tfq="@tfq" userAnswer="@userAnswer"></TrueFalseQuestionDetail>
						break;

					case TextInputQuestion tiq:
						<TextInputQuestionDetail userAnswer="@userAnswer"></TextInputQuestionDetail>
						break;

					case PairingQuestion pq:
						<PairingQuestionDetail question="@question" pq="@pq" pairs="@pairs" _pairColors="@_pairColors" selectedA="@selectedA" selectedB="@selectedB" userAnswers="@userAnswers"></PairingQuestionDetail>
						break;
					default:
						break;
				}

			</div>
		}
		<button class="btn btn-success" style="margin-top: 30px; margin-bottom: 20px;" @onclick="SubmitQuiz">Submit Quiz</button>
	}
}
else
{
	<p>Loading...</p>
}

@code {
	[Parameter] public int quizId { get; set; }
	private Quiz quiz;
	private List<UserAnswer> userAnswers = new List<UserAnswer>();
	private const string navigationString = @"\quizzes";

	//Outer int for questionId, inner int for selected option indices
	private Dictionary<int, int?> selectedA = new();
	private Dictionary<int, int?> selectedB = new();
	private Dictionary<int, Dictionary<int, int>> pairs = new();

	private static readonly string[] PairColors = new[]
		{
	"#FF0000", "#BAE1FF", "#B4DA55", "#FFFFBA", "#E2BAFF", "#FFDAC1"
  };
	private Dictionary<int, Dictionary<int, string>> _pairColors
			= new Dictionary<int, Dictionary<int, string>>();
	private Dictionary<int, int> _nextPairColorIndex = new();

	private string QrDataUrl;
	private bool _submitted;
	private int _correct, _total;


	protected override async Task OnInitializedAsync()
	{
		quiz = await QuizService.GetQuizByIdAsync(quizId);

		var absoluteUri = Navigation.ToAbsoluteUri($"/quizzes/{quizId}").ToString();
		QrDataUrl = await QrCodeService.GenerateQrCodeDataUrlAsync(absoluteUri);

		// Sort answer options for each question by ID
		foreach (var question in quiz.Questions)
		{
			question.AnswerOptions = question.AnswerOptions.OrderBy(o => o.Id).ToList();
		}

		foreach (var pq in quiz.Questions.OfType<PairingQuestion>())
		{
			var half = pq.AnswerOptions.Count / 2;
			pq.ColumnA = pq.AnswerOptions
									.Take(half)
									.Select(o => o.OptionText)
									.ToList();
			pq.ColumnB = pq.AnswerOptions
									.Skip(half)
									.Take(half)
									.Select(o => o.OptionText)
									.ToList();

			selectedA[pq.Id] = null;
			selectedB[pq.Id] = null;
			pairs[pq.Id] = new Dictionary<int, int>();
		}

		userAnswers = quiz.Questions.Select(q => new UserAnswer
			{
				QuestionId = q.Id,
				Question = q,
				SelectedAnswer = "" // Default: no answer selected
			}).ToList();

		foreach (var q in quiz.Questions.OfType<PairingQuestion>())
		{
			selectedA[q.Id] = null;
			selectedB[q.Id] = null;
			pairs[q.Id] = new Dictionary<int, int>();
		}
	}

	private Dictionary<int, List<int>> multipleChoiceSelections = new Dictionary<int, List<int>>();

	private async Task SubmitQuiz()
	{
		var quizResult = new UserQuizResult
			{
				QuizId = quizId,
				Answers = userAnswers,
				CorrectAnswers = userAnswers.Count(a => a.IsCorrect),
				WrongAnswers = userAnswers.Count(a => !a.IsCorrect)
			};

		await QuizService.SaveQuizResultAsync(quizResult);
		_total = userAnswers.Count;
		_correct = userAnswers.Count(a => a.IsCorrect);
		_submitted = true;
	}
}
